from aiogram import Router
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from misc.keyboards import main_kb
from misc.functions import send_career_query

router = Router()

# === –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ===
class CareerForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_age = State()
    waiting_for_education = State()


# === 1. –°—Ç–∞—Ä—Ç ===
@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *¬´–ö–∞—Ä—å–µ—Ä–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –≤ –ò–¢¬ª*! üíº\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ —Å—Ñ–µ—Ä–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!\n\n"
        "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        parse_mode="Markdown"
    )
    await state.set_state(CareerForm.waiting_for_name)


# === 2. –ò–º—è ===
@router.message(CareerForm.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    name = message.text.strip()
    await state.update_data(name=name)

    await message.answer("–û—Ç–ª–∏—á–Ω–æ! üòä –ê —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(CareerForm.waiting_for_age)


# === 3. –í–æ–∑—Ä–∞—Å—Ç ===
@router.message(CareerForm.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    age_text = message.text.strip()
    if not age_text.isdigit():
        await message.answer("‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        return

    await state.update_data(age=int(age_text))
    await message.answer("–°–ø–∞—Å–∏–±–æ! üéì –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–æ–µ —É —Ç–µ–±—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –∫–∞–∫–∏–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –≤–ª–∞–¥–µ–µ—à—å, –Ω–∞–ø–∏—à–∏ –≤—Å—ë —á—Ç–æ –∑–Ω–∞–µ—à—å?")
    await state.set_state(CareerForm.waiting_for_education)


# === 4. –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ===
@router.message(CareerForm.waiting_for_education)
async def process_education(message: Message, state: FSMContext):
    education = message.text.strip()
    await state.update_data(education=education)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    user_data = {
        "name": data["name"],
        "age": data["age"],
        "education": data["education"]
    }

    # –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await message.answer("‚è≥ –û—Ç–ª–∏—á–Ω–æ! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ API
    prompt = (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['name']}, {user_data['age']} –ª–µ—Ç, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {user_data['education']}.\n")
    response = await send_career_query(str(message.from_user.id), user_data, prompt)

    # –û—Ç–≤–µ—Ç –æ—Ç API
    answer_text = response.get("response", "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
    await message.answer(answer_text, reply_markup=main_kb)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
