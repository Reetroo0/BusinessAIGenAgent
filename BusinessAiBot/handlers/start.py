from aiogram import Router
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from misc.functions import send_career_query

router = Router()


# === –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ===
class CareerForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_age = State()
    waiting_for_education = State()
    waiting_for_interests = State()
    waiting_for_query = State()  # <-- –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞–Ω–∫–µ—Ç—ã


# === 1. –°—Ç–∞—Ä—Ç ===
@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *¬´–ö–∞—Ä—å–µ—Ä–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –≤ –ò–¢¬ª*! üíº\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ —Å—Ñ–µ—Ä–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!\n\n"
        "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        parse_mode="Markdown"
    )
    await state.set_state(CareerForm.waiting_for_name)


# === 2. –ò–º—è ===
@router.message(CareerForm.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    name = message.text.strip()
    await state.update_data(name=name)

    await message.answer("–û—Ç–ª–∏—á–Ω–æ! üòä –ê —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(CareerForm.waiting_for_age)


# === 3. –í–æ–∑—Ä–∞—Å—Ç ===
@router.message(CareerForm.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    age_text = message.text.strip()
    if not age_text.isdigit():
        await message.answer("‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        return

    await state.update_data(age=int(age_text))
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! üéì –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–æ–µ —É —Ç–µ–±—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, "
        "–∫–∞–∫–∏–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –≤–ª–∞–¥–µ–µ—à—å?"
    )
    await state.set_state(CareerForm.waiting_for_education)


# === 4. –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ===
@router.message(CareerForm.waiting_for_education)
async def process_education(message: Message, state: FSMContext):
    education = message.text.strip()
    await state.update_data(education=education)

    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! üîç –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ IT —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã? "
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –¥–∏–∑–∞–π–Ω, –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç.–¥."
    )
    await state.set_state(CareerForm.waiting_for_interests)


# === 5. –ò–Ω—Ç–µ—Ä–µ—Å—ã ===
@router.message(CareerForm.waiting_for_interests)
async def process_interests(message: Message, state: FSMContext):
    interests = message.text.strip()
    await state.update_data(interests=interests)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    user_data = {
        "name": data["name"],
        "age": data["age"],
        "education": data["education"],
        "interests": data["interests"]
    }

    await state.update_data(user_data=user_data)  # —Å–æ—Ö—Ä–∞–Ω–∏–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    await message.answer(
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.\n"
        "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∫–∞—Ä—å–µ—Ä–æ–π –≤ IT ‚Äî —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è! üí¨"
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º ‚Äú–æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤‚Äù
    await state.set_state(CareerForm.waiting_for_query)


# === 6. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –∞–Ω–∫–µ—Ç—ã ===
@router.message(CareerForm.waiting_for_query)
async def handle_user_query(message: Message, state: FSMContext):
    user_text = message.text.strip()
    data = await state.get_data()
    user_data = data.get("user_data")

    if not user_data:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start.")
        await state.clear()
        return

    await message.answer("üí≠ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è API
    prompt = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['name']}, {user_data['age']} –ª–µ—Ç.\n"
        f"–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {user_data['education']}.\n"
        f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {user_data['interests']}.\n"
        f"–í–æ–ø—Ä–æ—Å: {user_text}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ API
    response = await send_career_query(str(message.from_user.id), user_data, prompt)

    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    answer_text = response.get("response", "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
    await message.answer(answer_text)
