import sys

sys.path.append('..')

from langgraph.prebuilt import create_react_agent
from langgraph.checkpoint.memory import MemorySaver
from langchain_gigachat.chat_models import GigaChat
from langchain.schema.messages import HumanMessage
from tools import analyze_user_profile, find_matching_vacancies, create_learning_plan, provide_career_advice
from typing import Dict, Optional, List
import json

from dotenv import find_dotenv, load_dotenv
import os
import threading

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(find_dotenv())

# –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
_AGENT_LOCK = threading.Lock()
_AGENT = None
_AGENT_TOKEN = None

system_prompt = (
    "–¢—ã —è–≤–ª—è–µ—à—å—Å—è –ò–ò-–∞–≥–µ–Ω—Ç–æ–º ¬´–ö–∞—Ä—å–µ—Ä–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –≤ –ò–¢¬ª, —Ä–∞–±–æ—Ç–∞—é—â–∏–º –≤ —Ä–∞–º–∫–∞—Ö –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è, "
    "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —Å–≤—è–∑–∏. "
    "–û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å —Ç–≤–æ–µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è ‚Äî –ø–æ–º–æ—â—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º, –≤—ã–ø—É—Å–∫–Ω–∏–∫–∞–º –∏ –º–æ–ª–æ–¥—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º 18-25 –ª–µ—Ç "
    "–≤ –∫–∞—Ä—å–µ—Ä–Ω–æ–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏–∏ –≤ –ò–¢-—Å—Ñ–µ—Ä–µ. "
    "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: "
    "–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –Ω–∞–≤—ã–∫–∏ –∏ –ø–æ–¥–±–∏—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, "
    "–Ω–∞—Ö–æ–¥–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π, "
    "—Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–µ–±–Ω—ã–µ –ø–ª–∞–Ω—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è, "
    "–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ –∫–∞—Ä—å–µ—Ä–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º. "
    "–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º. "
    "–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã. "
    "–í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è."
)

TOOLS = [analyze_user_profile, find_matching_vacancies, create_learning_plan, provide_career_advice]


def _init_agent(token: str):
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è GigaChat
    os.environ["GIGACHAT_CREDENTIALS"] = token
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –∏ –∞–≥–µ–Ω—Ç–∞
    model = GigaChat(model="GigaChat-2", verify_ssl_certs=False)
    agent = create_react_agent(model, tools=TOOLS, checkpointer=MemorySaver(), prompt=system_prompt)
    return agent


def _get_agent(headers: Optional[Dict] = None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞; –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ç–æ–∫–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è"""
    global _AGENT, _AGENT_TOKEN

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω: –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization, –∏–Ω–∞—á–µ –∏–∑ env
    token = None
    if headers:
        auth = headers.get("Authorization") or headers.get("authorization")
        if auth and isinstance(auth, str) and auth.lower().startswith("bearer "):
            token = auth.split(None, 1)[1].strip()

    if not token:
        token = os.getenv("GIGACHAT_ACCESS_TOKEN")

    if token is None or len(token.strip()) == 0:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GIGACHAT_ACCESS_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–∞")

    with _AGENT_LOCK:
        if _AGENT is None or _AGENT_TOKEN != token:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ GigaChat
            os.environ["GIGACHAT_CREDENTIALS"] = token
            _AGENT = _init_agent(token)
            _AGENT_TOKEN = token
    return _AGENT


def run_agent(question: str, user_profile: Optional[Dict] = None, headers: Optional[Dict] = None) -> str:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    agent = _get_agent(headers)

    # –ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫ –≤–æ–ø—Ä–æ—Å—É
    if user_profile is not None:
        try:
            # –°–æ–∑–¥–∞–µ–º —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –±–ª–æ–∫ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            pairs = [f"{k}: {v}" for k, v in user_profile.items()]
            profile_block = "\n".join(pairs)
            full_question = f"{question}\n\n–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{profile_block}"
        except Exception:
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - —Å—ã—Ä–∞—è JSON —Å—Ç—Ä–æ–∫–∞
            full_question = f"{question}\n\n–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{json.dumps(user_profile, ensure_ascii=False)}"
        messages = [HumanMessage(content=full_question)]
    else:
        messages = [HumanMessage(content=question)]

    config = {"configurable": {"thread_id": 1}}

    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ —á–µ—Ä–µ–∑ env
    if os.getenv("DEBUG_AGENT_PAYLOAD"):
        print("DEBUG: –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
        for m in messages:
            print("---")
            print(m.content)

    try:
        resp = agent.invoke({"messages": messages}, config=config)
        answer = resp["messages"][-1].content
        return answer
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"


def run_career_navigator_interactive():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ö–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞ –≤ –ò–¢")
    print("=" * 50)
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("- '–≤—ã—Ö–æ–¥' - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")
    print("- '—Å–±—Ä–æ—Å' - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
    print("=" * 50)

    user_profile = {}

    while True:
        try:
            user_input = input("\nüë§ –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()

            if user_input.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit']:
                print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –£–¥–∞—á–∏ –≤ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏! üéØ")
                break

            if user_input.lower() in ['—Å–±—Ä–æ—Å', 'reset']:
                user_profile = {}
                print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥!")
                continue

            if not user_input:
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å")
                continue

            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            if not user_profile and len(user_input) > 20:
                user_profile["initial_description"] = user_input

            response = run_agent(user_input, user_profile)
            print(f"\nü§ñ –ù–∞–≤–∏–≥–∞—Ç–æ—Ä: {response}")

        except KeyboardInterrupt:
            print("\n\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –£–¥–∞—á–∏ –≤ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏! üéØ")
            break
        except Exception as e:
            print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '—Å–±—Ä–æ—Å' –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
def initialize_user_session(user_id: str, initial_data: Optional[Dict] = None) -> Dict:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    session_data = {
        "user_id": user_id,
        "profile": initial_data or {},
        "conversation_history": [],
        "created_at": json.dumps({"timestamp": "2024-01-01T00:00:00Z"})  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å datetime
    }
    return session_data


def process_career_query(user_id: str, query: str, session_data: Optional[Dict] = None,
                         headers: Optional[Dict] = None) -> Dict:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"""

    if session_data is None:
        session_data = initialize_user_session(user_id)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–∏
    enhanced_query = query
    if session_data.get("profile"):
        profile_context = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {json.dumps(session_data['profile'], ensure_ascii=False)}"
        enhanced_query = f"{query}\n\n{profile_context}"

    try:
        response = run_agent(enhanced_query, session_data.get("profile"), headers)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏
        session_data["conversation_history"].append({
            "query": query,
            "response": response,
            "timestamp": json.dumps({"timestamp": "2024-01-01T00:00:00Z"})  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å datetime
        })

        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–≤—ã–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        if "–Ω–∞–≤—ã–∫–∏" in response.lower() and not session_data["profile"].get("skills_extracted"):
            session_data["profile"]["skills_extracted"] = True

        return {
            "success": True,
            "response": response,
            "session_data": session_data,
            "suggested_actions": extract_suggested_actions(response)
        }

    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            "session_data": session_data
        }


def extract_suggested_actions(response: str) -> List[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞"""
    actions = []

    if "–≤–∞–∫–∞–Ω—Å" in response.lower():
        actions.append("find_vacancies")
    if "–∫—É—Ä—Å" in response.lower() or "–æ–±—É—á–µ–Ω" in response.lower() or "–ø–ª–∞–Ω" in response.lower():
        actions.append("create_learning_plan")
    if "–∫–æ–Ω—Å—É–ª—å—Ç" in response.lower() or "—Å–æ–≤–µ—Ç" in response.lower():
        actions.append("career_advice")
    if "–ø—Ä–æ—Ñ–∏–ª—å" in response.lower() or "–Ω–∞–≤—ã–∫" in response.lower():
        actions.append("analyze_profile")

    return actions if actions else ["general_help"]


__all__ = ["run_agent", "run_career_navigator_interactive", "process_career_query", "initialize_user_session"]

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
    run_career_navigator_interactive()