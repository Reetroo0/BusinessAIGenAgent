from typing import Dict, List, Optional, Any
from pydantic import BaseModel, Field
from langchain.tools.base import tool
from langchain.callbacks.manager import CallbackManagerForToolRun

import json
import re
from pathlib import Path
from difflib import SequenceMatcher


# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserProfile(BaseModel):
    education_level: str = Field(description="–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    known_technologies: List[str] = Field(description="–°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è")
    interests: List[str] = Field(description="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–¢, –∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    experience: str = Field(description="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)")
    career_goals: Optional[str] = Field(description="–ö–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏")


class Vacancy(BaseModel):
    id: str
    title: str
    company: str
    required_skills: List[str]
    preferred_skills: List[str]
    salary_range: Optional[Dict[str, int]]
    experience_level: str
    description: str


class Course(BaseModel):
    id: str
    title: str
    platform: str
    skills_covered: List[str]
    duration: str
    level: str
    url: str


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö –∏ –∫—É—Ä—Å–∞—Ö
def load_vacancies_data(path: str | Path = None) -> Dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    if path is None:
        path = Path(__file__).parent / 'processed_vacancies.json'
    else:
        path = Path(path)
    try:
        with open(path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"vacancies": []}


def load_courses_data(path: str | Path = None) -> Dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    if path is None:
        path = Path(__file__).parent / 'courses_data.json'
    else:
        path = Path(path)
    try:
        with open(path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"courses": []}


# –°–∏–Ω–æ–Ω–∏–º—ã –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
SKILLS_SYNONYMS = {
    "python": ["python", "python3", "–ø–∏—Ç–æ–Ω"],
    "javascript": ["javascript", "js", "ecmascript"],
    "java": ["java", "–¥–∂–∞–≤–∞"],
    "sql": ["sql", "mysql", "postgresql", "–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"],
    "html": ["html", "html5"],
    "css": ["css", "css3"],
    "react": ["react", "react.js", "reactjs"],
    "vue": ["vue", "vue.js", "vuejs"],
    "angular": ["angular", "angular.js", "angularjs"],
    "node": ["node", "node.js", "nodejs"],
    "docker": ["docker", "–¥–æ–∫–µ—Ä"],
    "kubernetes": ["kubernetes", "k8s"],
    "aws": ["aws", "amazon web services"],
    "git": ["git", "–≥–∏—Ç"],
    "linux": ["linux", "unix"],
    "machine learning": ["machine learning", "ml", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"],
    "data science": ["data science", "data analysis", "–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"],
    "data analysis": ["data analysis", "–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "data analytics"],
    "business intelligence": ["business intelligence", "bi", "–±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞"],
}


# –§—É–Ω–∫—Ü–∏—è ‚Ññ1: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@tool
def analyze_user_profile(user_input: str) -> str:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≤—ã–∫–∞—Ö, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.

    Args:
        user_input: –¢–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –µ–≥–æËÉåÊôØ, –Ω–∞–≤—ã–∫–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤

    Returns:
        str: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    print("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: analyze_user_profile")

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    education_level = extract_education_level(user_input)
    skills = extract_skills_from_text(user_input)
    interests = extract_interests(user_input)
    experience = extract_experience(user_input)

    # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    recommended_directions = recommend_career_directions(skills, interests)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    response = f"""üéØ –û—Ç–ª–∏—á–Ω–æ! –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

üìä –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞–≤—ã–∫–∏:
{format_skills_list(skills)}

üéì –£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {education_level}
üíº –û–ø—ã—Ç: {experience}

üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
{format_recommendations(recommended_directions)}

–•–æ—Ç–∏—Ç–µ:
üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö
üìö –ü–æ–ª—É—á–∏—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è  
üí¨ –û–±—Å—É–¥–∏—Ç—å –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""

    return response


def extract_education_level(text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    text_lower = text.lower()

    if any(word in text_lower for word in ['—Å—Ç—É–¥–µ–Ω—Ç', '—É—á—É—Å—å', '–æ–±—É—á–∞—é—Å—å', '–≤—É–∑', '—É–Ω–∏–≤–µ—Ä']):
        if '1 –∫—É—Ä—Å' in text_lower:
            return "–°—Ç—É–¥–µ–Ω—Ç 1 –∫—É—Ä—Å–∞"
        elif '2 –∫—É—Ä—Å' in text_lower:
            return "–°—Ç—É–¥–µ–Ω—Ç 2 –∫—É—Ä—Å–∞"
        elif '3 –∫—É—Ä—Å' in text_lower:
            return "–°—Ç—É–¥–µ–Ω—Ç 3 –∫—É—Ä—Å–∞"
        elif '4 –∫—É—Ä—Å' in text_lower:
            return "–°—Ç—É–¥–µ–Ω—Ç 4 –∫—É—Ä—Å–∞"
        else:
            return "–°—Ç—É–¥–µ–Ω—Ç"
    elif any(word in text_lower for word in ['–≤—ã–ø—É—Å–∫–Ω–∏–∫', '–∑–∞–∫–æ–Ω—á–∏–ª', '–æ–∫–æ–Ω—á–∏–ª']):
        return "–í—ã–ø—É—Å–∫–Ω–∏–∫"
    elif any(word in text_lower for word in ['—à–∫–æ–ª', '—É—á–µ–Ω–∏–∫']):
        return "–®–∫–æ–ª—å–Ω–∏–∫"
    else:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"


def extract_skills_from_text(text: str) -> List[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–≤—ã–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    text_lower = text.lower()
    found_skills = set()

    # –ü–æ–∏—Å–∫ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º
    for normalized_skill, synonyms in SKILLS_SYNONYMS.items():
        for synonym in synonyms:
            if synonym in text_lower:
                found_skills.add(normalized_skill)
                break

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    skill_patterns = [
        r'\b(python|javascript|java|sql|html|css|react|vue|angular|node|docker|kubernetes|aws|git|linux)\b',
        r'\b(machine learning|data science|data analysis|business intelligence|computer vision)\b',
        r'\b(–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ|—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞|–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö|—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ|–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è)\b'
    ]

    for pattern in skill_patterns:
        matches = re.findall(pattern, text_lower)
        for match in matches:
            if isinstance(match, tuple):
                match = match[0]
            normalized_skill = normalize_skill(match)
            found_skills.add(normalized_skill)

    return list(found_skills)


def extract_interests(text: str) -> List[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    text_lower = text.lower()
    interests = []

    interest_keywords = {
        'data analysis': ['–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö', 'data analysis', '–∞–Ω–∞–ª–∏—Ç–∏–∫'],
        'machine learning': ['–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', 'machine learning', 'ml'],
        'web development': ['–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'web development', 'frontend', 'backend'],
        'mobile development': ['–º–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'mobile development'],
        'devops': ['devops', '–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞'],
        'data science': ['data science', '–Ω–∞—É–∫–∞ –æ –¥–∞–Ω–Ω—ã—Ö'],
    }

    for interest, keywords in interest_keywords.items():
        if any(keyword in text_lower for keyword in keywords):
            interests.append(interest)

    return interests


def extract_experience(text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—ã—Ç–µ"""
    text_lower = text.lower()

    if any(phrase in text_lower for phrase in ['–Ω–µ—Ç –æ–ø—ã—Ç–∞', '–±–µ–∑ –æ–ø—ã—Ç–∞', '–æ–ø—ã—Ç–∞ –Ω–µ—Ç', '–ø–æ–∫–∞ –Ω–µ—Ç']):
        return "–ë–µ–∑ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã"
    elif any(word in text_lower for word in ['—Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞', '–∏–Ω—Ç–µ—Ä–Ω', '–ø—Ä–∞–∫—Ç–∏–∫']):
        return "–û–ø—ã—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏"
    elif any(word in text_lower for word in ['–æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã', '—Ä–∞–±–æ—Ç–∞–ª', '—Ä–∞–±–æ—Ç–∞—é']):
        return "–ï—Å—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"
    else:
        return "–ù–µ —É–∫–∞–∑–∞–Ω"


def normalize_skill(skill: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞"""
    skill = skill.lower().strip()

    for normalized_skill, synonyms in SKILLS_SYNONYMS.items():
        if skill in synonyms:
            return normalized_skill

    return skill


def recommend_career_directions(skills: List[str], interests: List[str]) -> List[Dict[str, Any]]:
    """–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–≤—ã–∫–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    directions = [
        {
            "name": "Data Analyst",
            "required_skills": ["python", "sql", "data analysis"],
            "match_score": 0
        },
        {
            "name": "Data Scientist",
            "required_skills": ["python", "machine learning", "data science"],
            "match_score": 0
        },
        {
            "name": "Business Intelligence Analyst",
            "required_skills": ["sql", "business intelligence", "data analysis"],
            "match_score": 0
        },
        {
            "name": "Backend Developer",
            "required_skills": ["python", "java", "sql", "node"],
            "match_score": 0
        },
        {
            "name": "Frontend Developer",
            "required_skills": ["javascript", "html", "css", "react"],
            "match_score": 0
        }
    ]

    # –†–∞—Å—á–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    for direction in directions:
        required = direction["required_skills"]
        matched_skills = 0

        for req_skill in required:
            for user_skill in skills:
                if calculate_skill_similarity(user_skill, req_skill) > 0.7:
                    matched_skills += 1
                    break

        direction["match_score"] = matched_skills / len(required) if required else 0

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    directions.sort(key=lambda x: x["match_score"], reverse=True)

    return directions[:3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-3 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è


def calculate_skill_similarity(skill1: str, skill2: str) -> float:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –Ω–∞–≤—ã–∫–∞–º–∏"""
    return SequenceMatcher(None, skill1.lower(), skill2.lower()).ratio()


def format_skills_list(skills: List[str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    if not skills:
        return "‚Ä¢ –ù–∞–≤—ã–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"

    return "\n".join([f"‚Ä¢ {skill.capitalize()}" for skill in skills])


def format_recommendations(recommendations: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    result = []
    for rec in recommendations:
        score = rec["match_score"]
        if score >= 0.7:
            level = "–≤—ã—Å–æ–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"
        elif score >= 0.4:
            level = "—Å—Ä–µ–¥–Ω–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"
        else:
            level = "–Ω–∏–∑–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"

        result.append(f"{len(result) + 1}. {rec['name']} - {level}")

    return "\n".join(result)


# –§—É–Ω–∫—Ü–∏—è ‚Ññ2: –ü–æ–¥–±–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –ø—Ä–æ—Ñ–∏–ª—é
@tool
def find_matching_vacancies(user_skills: str, experience_level: str = "beginner") -> str:
    """
    –ü–æ–¥–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Ä–æ–≤–Ω—è –æ–ø—ã—Ç–∞.

    Args:
        user_skills: –°—Ç—Ä–æ–∫–∞ —Å –Ω–∞–≤—ã–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ)
        experience_level: –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ (beginner, junior, middle)

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    """
    print("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: find_matching_vacancies")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–≤—ã–∫–∏ –∏–∑ –≤—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    skills_list = extract_skills_from_text(user_skills)
    vacancies_data = load_vacancies_data()

    if not vacancies_data.get("vacancies"):
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–∞–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    matching_vacancies = []

    for vacancy in vacancies_data["vacancies"]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Ä–æ–≤–Ω—é –æ–ø—ã—Ç–∞
        vacancy_exp = vacancy.get("experience", "").lower()
        if experience_level == "beginner" and "senior" in vacancy_exp:
            continue

        # –†–∞—Å—á–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞–≤—ã–∫–æ–≤
        vacancy_skills = vacancy.get("skills", [])
        match_score = calculate_vacancy_match(skills_list, vacancy_skills)

        if match_score > 0.3:  # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            matching_vacancies.append({
                "vacancy": vacancy,
                "match_score": match_score
            })

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    matching_vacancies.sort(key=lambda x: x["match_score"], reverse=True)

    if not matching_vacancies:
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤."

    return format_vacancies_response(matching_vacancies[:5])


def calculate_vacancy_match(user_skills: List[str], vacancy_skills: List[str]) -> float:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –Ω–∞–≤—ã–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–∞–∫–∞–Ω—Å–∏–∏"""
    if not user_skills or not vacancy_skills:
        return 0.0

    matched_skills = 0
    for vacancy_skill in vacancy_skills:
        for user_skill in user_skills:
            if calculate_skill_similarity(user_skill, vacancy_skill) > 0.7:
                matched_skills += 1
                break

    return matched_skills / len(vacancy_skills)


def format_vacancies_response(vacancies: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏"""
    response = "üîç –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n\n"

    for i, vac_data in enumerate(vacancies, 1):
        vacancy = vac_data["vacancy"]
        match_score = vac_data["match_score"]

        response += f"{i}. **{vacancy.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}**\n"
        response += f"   üè¢ {vacancy.get('company', '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        response += f"   üí∞ {vacancy.get('salary', '–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        response += f"   üéØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {match_score:.0%}\n"
        response += f"   üìç {vacancy.get('experience', '–û–ø—ã—Ç –Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"

    response += "–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ –≤–∞–∫–∞–Ω—Å–∏–π –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏?"
    return response


# –§—É–Ω–∫—Ü–∏—è ‚Ññ3: –°–æ–∑–¥–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
@tool
def create_learning_plan(target_position: str, current_skills: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.

    Args:
        target_position: –¶–µ–ª–µ–≤–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Data Analyst")
        current_skills: –¢–µ–∫—É—â–∏–µ –Ω–∞–≤—ã–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        str: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω
    """
    print("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: create_learning_plan")

    current_skills_list = extract_skills_from_text(current_skills)
    courses_data = load_courses_data()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
    required_skills_map = {
        "data analyst": ["sql", "python", "data analysis", "excel", "tableau"],
        "data scientist": ["python", "machine learning", "sql", "statistics", "data science"],
        "frontend developer": ["javascript", "html", "css", "react", "git"],
        "backend developer": ["python", "sql", "docker", "linux", "git"]
    }

    target_skills = required_skills_map.get(target_position.lower(), [])
    missing_skills = [skill for skill in target_skills
                      if not any(calculate_skill_similarity(skill, user_skill) > 0.7
                                 for user_skill in current_skills_list)]

    if not missing_skills:
        return f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞–≤—ã–∫–∏ —É–∂–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¥–ª—è {target_position}. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ."

    # –ü–æ–¥–±–∏—Ä–∞–µ–º –∫—É—Ä—Å—ã –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –Ω–∞–≤—ã–∫–æ–≤
    recommended_courses = []
    for skill in missing_skills:
        matching_courses = find_courses_for_skill(skill, courses_data)
        if matching_courses:
            recommended_courses.extend(matching_courses[:2])  # –ë–µ—Ä–µ–º –¥–æ 2 –∫—É—Ä—Å–æ–≤ –Ω–∞ –Ω–∞–≤—ã–∫

    return format_learning_plan_response(target_position, missing_skills, recommended_courses)


def find_courses_for_skill(skill: str, courses_data: Dict) -> List[Dict]:
    """–ù–∞—Ö–æ–¥–∏—Ç –∫—É—Ä—Å—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞"""
    if not courses_data.get("courses"):
        return []

    matching_courses = []
    for course in courses_data["courses"]:
        course_skills = course.get("skills_covered", [])
        for course_skill in course_skills:
            if calculate_skill_similarity(skill, course_skill) > 0.7:
                matching_courses.append(course)
                break

    return matching_courses


def format_learning_plan_response(target_position: str, missing_skills: List[str], courses: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å —É—á–µ–±–Ω—ã–º –ø–ª–∞–Ω–æ–º"""
    response = f"""üéì –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ **{target_position}**

üìã –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å–≤–æ–∏—Ç—å:
{format_skills_list(missing_skills)}

---

üìö –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫—É—Ä—Å—ã:

"""

    for i, course in enumerate(courses, 1):
        response += f"{i}. **{course.get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞')}**\n"
        response += f"   üì∫ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {course.get('platform', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        response += f"   ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {course.get('duration', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        response += f"   üéØ –£—Ä–æ–≤–µ–Ω—å: {course.get('level', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        response += f"   üîó –°—Å—ã–ª–∫–∞: {course.get('url', '–ù–µ –¥–æ—Å—Ç—É–ø–Ω–∞')}\n\n"

    response += "üí° –°–æ–≤–µ—Ç: –°–æ—á–µ—Ç–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –∫—É—Ä—Å–∞—Ö —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞."

    return response


# –§—É–Ω–∫—Ü–∏—è ‚Ññ4: –ö–∞—Ä—å–µ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
@tool
def provide_career_advice(question: str) -> str:
    """
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –∫–∞—Ä—å–µ—Ä–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –≤ –ò–¢-—Å—Ñ–µ—Ä–µ.

    Args:
        question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∫–∞—Ä—å–µ—Ä–µ –≤ –ò–¢

    Returns:
        str: –û—Ç–≤–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∏ —Å–æ–≤–µ—Ç–∞–º–∏
    """
    print("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: provide_career_advice")

    # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ –∫–∞—Ä—å–µ—Ä–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º
    career_advice_db = {
        "—Å—Ç–∞—Ä—Ç –∫–∞—Ä—å–µ—Ä—ã": """
üöÄ **–° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å –∫–∞—Ä—å–µ—Ä—É –≤ –ò–¢:**

1. **–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã** - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–µ–∫—Ç—ã
2. **–û—Å–≤–æ–π—Ç–µ –±–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏** - Git, –æ—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
3. **–°–æ–∑–¥–∞–π—Ç–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ** - –¥–∞–∂–µ —É—á–µ–±–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
4. **–ò—â–∏—Ç–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏** - –º–Ω–æ–≥–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö
5. **–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∫–æ–º—å—é–Ω–∏—Ç–∏** - —Ö–∞–±—Ä, meetups, –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏

–ù–∞—á–Ω–∏—Ç–µ —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º –∑–∞–¥–∞—á–∞–º.
""",
        "—Å–º–µ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏": """
üîÑ **–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ò–¢ –∏–∑ –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:**

‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–ø—ã—Ç - –º–Ω–æ–≥–∏–µ –Ω–∞–≤—ã–∫–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã
‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å —Å–º–µ–∂–Ω—ã—Ö —Ä–æ–ª–µ–π (–±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫, –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä)
‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã —Å —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
‚Ä¢ –£–¥–µ–ª—è–π—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∞–∫—Ç–∏–∫–µ - —Ç–µ–æ—Ä–∏—è –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∞–ª–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞

–ü–æ–º–Ω–∏—Ç–µ: —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–º–µ–Ω—â–∏–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ - 28-35 –ª–µ—Ç!
""",
        "–ø–æ–≤—ã—à–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏": """
üìà **–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Ä–æ—Å—Ç:**

‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å (Middle, Senior, Lead)
‚Ä¢ –ò–∑—É—á–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
‚Ä¢ –°–æ—Å—Ç–∞–≤—å—Ç–µ –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞ 6-12 –º–µ—Å—è—Ü–µ–≤
‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –º–µ–Ω—Ç–æ—Ä–∞ –∏–ª–∏ –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏ –±–µ—Ä–∏—Ç–µ –Ω–∞ —Å–µ–±—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å

–†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Ä–µ–∑—é–º–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å.
"""
    }

    # –ü–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    question_lower = question.lower()
    best_match = None
    max_similarity = 0

    for key in career_advice_db.keys():
        similarity = calculate_skill_similarity(question_lower, key)
        if similarity > max_similarity:
            max_similarity = similarity
            best_match = key

    if best_match and max_similarity > 0.3:
        return career_advice_db[best_match]
    else:
        return """
ü§î –ü–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

‚Ä¢ –ò–∑—É—á–∏—Ç–µ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–∞ —Ä—ã–Ω–∫–µ —Ç—Ä—É–¥–∞
‚Ä¢ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–∞—Ö, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–æ—Ä–∏–∏
‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ —Å–∏–ª—å–Ω–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
‚Ä¢ –†–∞–∑–≤–∏–≤–∞–π—Ç–µ soft skills - –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è, —Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ, —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
‚Ä¢ –ù–µ –±–æ–π—Ç–µ—Å—å –Ω–∞—á–∏–Ω–∞—Ç—å —Å junior-–ø–æ–∑–∏—Ü–∏–π - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –ø—É—Ç—å —Ä–æ—Å—Ç–∞

–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –∫–∞—Ä—å–µ—Ä–µ –≤ –ò–¢?
"""